{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAmCeA,MA7Bf,YAA6D,EAA5CC,GAA6C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACjD,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACGD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,oBAAgBL,UAAU,gBAA1B,SACGI,GADMC,QAKb,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBCoLOC,G,kNAhDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,6CALV,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAGZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IANzB,2C,uDASZ,WACEQ,KAAKN,c,oBAGP,WAAU,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,yBAASV,UAAU,YAAnB,SACGS,EACC,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,gBAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGU,EAAOP,KAAI,SAACe,GACX,OACE,cAAC,EAAD,CAEExB,GAAIwB,EAAMxB,GACVC,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAMC,mBACdpB,OAAQmB,EAAMnB,QANTmB,EAAMxB,e,GAxFX0B,IAAMC,YCtFxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7f892da2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n// state가 필요없는 component는 class component가 될 필요는 없다.\r\n// css는 컴포넌트 html안에  style={{}}이렇게 해주면 됨.\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img src={poster} alt={title} title={title}></img>\r\n      <div className=\"movie__data\">\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"movie__genres\">\r\n          {genres.map((genre, index) => (\r\n            <li key={index} className=\"genres__genre\">\r\n              {genre}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","// 이거는 원래 없던거인데 내가 적음. 이게 없으면... jsx가 있는 컴포넌트를 사용하는 것을 이해못한다는데 업데이트된거같다, 없어도된다.\nimport React from \"react\";\n// Potato는 새로만든 컴포넌트인데 App이라는 큰 컴포넌트안에 return 안에 JSX인 \"<Potato />\"를 넣어주니 들어가더라..\n//import Potato from \"./Potato\";\n// 전달받은 props가 내가 원하는 props인지 체크해줌.\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\n//css 임포트\nimport \"./App.css\";\n\n// 컴포넌트는 Javascript object(array)를 props로 가져갈수 있당!\n// const foodILike = [\n//   {\n//     id: 1,\n//     name: \"Kimchi\",\n//     image:\n//       \"http://aeriskitchen.com/wp-content/uploads/2008/09/kimchi_bokkeumbap_02-.jpg\",\n//     //rating: 5,\n//   },\n//   {\n//     id: 2,\n//     name: \"Samgyeopsal\",\n//     image:\n//       \"https://3.bp.blogspot.com/-hKwIBxIVcQw/WfsewX3fhJI/AAAAAAAAALk/yHxnxFXcfx4ZKSfHS_RQNKjw3bAC03AnACLcBGAs/s400/DSC07624.jpg\",\n//     rating: 4.9,\n//   },\n//   {\n//     id: 3,\n//     name: \"Bibimbap\",\n//     image:\n//       \"http://cdn-image.myrecipes.com/sites/default/files/styles/4_3_horizontal_-_1200x900/public/image/recipes/ck/12/03/bibimbop-ck-x.jpg?itok=RoXlp6Xb\",\n//     rating: 4.8,\n//   },\n//   {\n//     id: 4,\n//     name: \"Doncasu\",\n//     image:\n//       \"https://s3-media3.fl.yelpcdn.com/bphoto/7F9eTTQ_yxaWIRytAu5feA/ls.jpg\",\n//     rating: 4.7,\n//   },\n//   {\n//     id: 5,\n//     name: \"Kimbap\",\n//     image:\n//       \"http://cdn2.koreanbapsang.com/wp-content/uploads/2012/05/DSC_1238r-e1454170512295.jpg\",\n//     rating: 4.6,\n//   },\n// ];\n\n// // 컴포넌트는 재사용이 된다. html코드안에 js를 쓰고 싶으면 {}를 하고 안에 코드 작성 ㄱㄱ.\n// //function Foodd(props)도 된다.\n// function Food({ name, picture, rating }) {\n//   // 아래 처럼 매개변수를 리턴할 html에 넣는것도가능하다.\n//   return (\n//     <div>\n//       <h2>{name}</h2>\n//       <h4>{rating}/5.0</h4>\n//       <img src={picture} alt={name}></img>\n//     </div>\n//   );\n// }\n\n// // yarn add prop-types => 전달받은 props가 내가 원하는 props인지 체크해줌. 뭐.. props 이름이 잘못됏다던가 그런가..\n// // 여기에는 내가 얻고싶은 props의 설명을 적느다.\n// // Food.propTypes는 p가 소문자로 시작, 이거는 고정임 리액트가 그렇게 만들어짐, array.propTypes로 해야 체크가능.\n// Food.propTypes = {\n//   name: PropTypes.string.isRequired,\n//   picture: PropTypes.string.isRequired,\n//   rating: PropTypes.number,\n// };\n\n// //react는 밀어넣는다 무엇을? virtual dom에 html코드를.. // 컴포넌트는 대문자로 시작해야함.\n// //react는 컴포넌트 안에 prop을 넣어서 정보를 전달할 수 있따. 바로 컴포넌트안에 매개변수로 넣어주면 된다.(props -> 컴포넌트의 매개변수)\n// // App -> Food(child)로 props를 통해 정보를 보냄.\n// // html 안에 {jsarray.map(obj =>( <component props = {~~~}/>))}로 동적으로 컴포넌트를 생성할수 잇따!\n// // Warning: Each child in a list should have a unique \"key\" prop. ==> 이게 발생한 원인은? 리액트의 각 컴포넌트는 유일한 키값을 가지고 있어야한다.(key prop이 겹치면 안됨.)\n// function App() {\n//   return (\n//     <div>\n//       <h1>heeol</h1>\n//       {foodILike.map((dish) => (\n//         <Food\n//           key={dish.id}\n//           name={dish.name}\n//           picture={dish.image}\n//           rating={dish.rating}\n//         />\n//       ))}\n//     </div>\n//   );\n// }\n\n// fuction component와 달리 class component를 만들자 -> React.component 상속\n// class component는 리턴이 없고 render method로..\nclass App extends React.Component {\n  // // 리액트 라이프사이클!\n  // // 1. Mounting : created and inserted into DOM\n  // // 순서 : counstructor() -> static getDrivedStateFromProps() -> render() -> componentDidMount()\n  // constructor(props) {\n  //   // Must call super constructor in derived class before accessing 'this' or returning from derived constructor\n  //   super(props);\n  //   console.log(\"start\");\n  // }\n\n  // // 클래스 컴포넌트를 사용하는 이유는 state object 때문이다. 컴포넌트에 데이터넣을 공간이 있고 데이터가 변할때..\n  // // this.state.뭐시기로 사용.\n  // state = {\n  //   count: 0,\n  // };\n  // // state에 직접 접근하게 되면(ex: this.state) 리액트는 render method를 refresh하지 않음.\n  // // 정확히는 컴포넌트가 Updateing Lifcycle로 들어감!\n  // // setstate에 새로운 object를 넣어줘야함.({count:1})\n  // // setState(current => ({current~~})) 여기서 current는 current state를 뜻함.\n  // // ({}) is part of implicit return  ==> js는 이게 return 을 나타내기위한 {} 인지,\n  // // 아니면 객체를 나타내기 위한 {} 인지 잘 모르기 때문에 둘을 구분하기 위해\n  // // 객체 를 반환하는 경우 ({}) 를 사용\n  // add = () => {\n  //   //this.state.count = 1;\n  //   this.setState((current) => ({ count: current.count + 1 }));\n  // };\n  // minus = () => {\n  //   this.setState((current) => ({ count: current.count - 1 }));\n  // };\n\n  // // Mounting 중 컴포넌트가 render() method 실행한 후 콜백으로 실행\n  // componentDidMount() {\n  //   console.log(\"component rendered\");\n  // }\n  // // Updating(setState호출) 중 컴포넌트의 state가 update되고 render() method가 실행된 후 콜백으로 실행\n  // componentDidUpdate() {\n  //   console.log(\"component updated!\");\n  // }\n  // // UnMounting 중(컴포넌트가 떠날때)\n  // componentWillUnmount() {\n  //   console.log(\"component killed\");\n  // }\n  // react는 자동적으로 클래스 컴포넌트의 render 메서드를 실행시킨다.\n  // render() {\n  //   console.log(\"im rendering\");\n  //   return (\n  //     <div>\n  //       <h1>the number is {this.state.count}</h1>\n  //       {\n  //         //리액트는 버튼에 onclick props를 자동으로 가지고 있다.\n  //       }\n  //       <button onClick={this.add}>add</button>\n  //       <button onClick={this.minus}>minus</button>\n  //     </div>\n  //   );\n  // }\n\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\n    this.setState({ movies, isLoading: false });\n  };\n\n  componentDidMount() {\n    this.getMovies();\n  }\n  // map은 뭔가를 무조건 리턴 해야함.\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__stext\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map((movie) => {\n              return (\n                <Movie\n                  key={movie.id}\n                  id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  poster={movie.medium_cover_image}\n                  genres={movie.genres}\n                />\n              );\n            })}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// \"<App />\"는 컴포넌트임.\n// component : html 코드를 반환하는 함수 -> 컴포넌트를 사용해서 html처럼 사용함. -> Js + html = JSX(컴포넌트를 사용하는 방법)\n// JSX : html inside of javascript\n// render은 하나의컴포넌트만 렌더링가능\n// 그러나 Application 컴포넌트 안에 많은 컴포넌트를 넣을수 있고 그 안에다시 더 많은 컴포넌트를 넣을 수 있다.(import로)\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}