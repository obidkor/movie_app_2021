{"version":3,"sources":["routes/About.js","components/Movie.js","routes/Home.js","routes/Detail.js","components/Navigation.js","App.js","index.js"],"names":["About","props","className","Movie","id","year","title","summary","poster","genres","to","pathname","state","src","alt","map","genre","index","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","Detail","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wTAgBeA,MAZf,SAAeC,GACb,OACE,qBAAKC,UAAU,sB,gFCwCJC,MApCf,YAA8D,IAA7CC,EAA4C,EAA5CA,GAAIC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACjD,OACE,qBAAKP,UAAU,QAAf,SACE,eAAC,IAAD,CACEQ,GAAI,CACFC,SAAS,UAAD,OAAYP,GACpBQ,MAAO,CAAEP,OAAMC,QAAOC,UAASC,SAAQC,WAH3C,UAME,qBAAKI,IAAKL,EAAQM,IAAKR,EAAOA,MAAOA,IACrC,sBAAKJ,UAAU,cAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BI,IAC9B,oBAAIJ,UAAU,cAAd,SAA6BG,IAC7B,oBAAIH,UAAU,gBAAd,SACGO,EAAOM,KAAI,SAACC,EAAOC,GAAR,OACV,oBAAgBf,UAAU,gBAA1B,SACGc,GADMC,QAKb,oBAAGf,UAAU,iBAAb,UAA+BK,EAAQW,MAAM,EAAG,KAAhD,kBC2KKC,G,kNAhDbP,MAAQ,CACNQ,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,6CALV,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAGZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IANzB,2C,uDASZ,WACEQ,KAAKN,c,oBAGP,WAAU,IAAD,EACuBM,KAAKhB,MAA3BQ,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,yBAASnB,UAAU,YAAnB,SACGkB,EACC,qBAAKlB,UAAU,SAAf,SACE,sBAAMA,UAAU,gBAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGmB,EAAON,KAAI,SAACc,GACX,OACE,cAAC,EAAD,CAEEzB,GAAIyB,EAAMzB,GACVC,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAMC,mBACdrB,OAAQoB,EAAMpB,QANToB,EAAMzB,e,GAxFV2B,IAAMC,YCzDVC,G,6KAjCb,WAAqB,IAAD,EACYL,KAAK3B,MAA3BiC,EADU,EACVA,SAAUC,EADA,EACAA,aACKC,IAAnBF,EAAStB,OACXuB,EAAQE,KAAK,O,oBAGjB,WAAU,IAEFR,EADeD,KAAK3B,MAAlBiC,SACetB,MACvB,OAAIiB,EAEA,sBAAK3B,UAAU,oBAAf,UACE,qBAAKW,IAAKgB,EAAMrB,OAAQM,IAAKe,EAAMvB,MAAOA,MAAOuB,EAAMvB,QACvD,sBAAKJ,UAAU,cAAf,UACE,oBAAIA,UAAU,eAAd,SAA8B2B,EAAMvB,QACpC,oBAAIJ,UAAU,cAAd,SAA6B2B,EAAMxB,OACnC,oBAAIH,UAAU,gBAAd,SACG2B,EAAMpB,OAAOM,KAAI,SAACC,EAAOC,GAAR,OAChB,oBAAgBf,UAAU,gBAA1B,SACGc,GADMC,QAKb,mBAAGf,UAAU,iBAAb,SAA+B2B,EAAMtB,gBAKpC,S,GA7BQwB,IAAMC,Y,MCYZM,MATf,WACE,OACE,sBAAKpC,UAAU,MAAf,UACE,cAAC,IAAD,CAAMQ,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,SAAT,uB,MCYS6B,MAXf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWvB,IACxC,cAAC,IAAD,CAAOqB,KAAK,SAASE,UAAW1C,IAChC,cAAC,IAAD,CAAOwC,KAAK,aAAaE,UAAWT,QCV1CU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.92c0024f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./About.css\";\r\n\r\n// About component는 react-router-dom에 의해 Route되고, 그로인해 기본 props를 가진다.\r\nfunction About(props) {\r\n  return (\r\n    <div className=\"about__container\">\r\n      {/* <span>\r\n        “Freedom is the freedom to say that two plus two make four. If that is\r\n        granted, all else follows.”\r\n      </span>\r\n      <span>− George Orwell, 1984</span> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n// state가 필요없는 component는 class component가 될 필요는 없다.\r\n// css는 컴포넌트 html안에  style={{}}이렇게 해주면 됨.\r\n// Link는 <HashRouter>와 같은 Router의 child이어야 작동한다.\r\n// <Link>의 \"to\" props에 {}(object)를 넘길수 있다. 여기에서 state(props)를 넘길수 있다.(click하면)\r\n// state위치 props의 location.state에 있음\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <Link\r\n        to={{\r\n          pathname: `/movie/${id}`,\r\n          state: { year, title, summary, poster, genres },\r\n        }}\r\n      >\r\n        <img src={poster} alt={title} title={title}></img>\r\n        <div className=\"movie__data\">\r\n          <h3 className=\"movie__title\">{title}</h3>\r\n          <h5 className=\"movie__year\">{year}</h5>\r\n          <ul className=\"movie__genres\">\r\n            {genres.map((genre, index) => (\r\n              <li key={index} className=\"genres__genre\">\r\n                {genre}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","// 이거는 원래 없던거인데 내가 적음. 이게 없으면... jsx가 있는 컴포넌트를 사용하는 것을 이해못한다는데 업데이트된거같다, 없어도된다.\r\nimport React from \"react\";\r\n// Potato는 새로만든 컴포넌트인데 App이라는 큰 컴포넌트안에 return 안에 JSX인 \"<Potato />\"를 넣어주니 들어가더라..\r\n//import Potato from \"./Potato\";\r\n// 전달받은 props가 내가 원하는 props인지 체크해줌.\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport Movie from \"../components/Movie\";\r\n//css 임포트\r\nimport \"./Home.css\";\r\n\r\n// 컴포넌트는 Javascript object(array)를 props로 가져갈수 있당!\r\n// const foodILike = [\r\n//   {\r\n//     id: 1,\r\n//     name: \"Kimchi\",\r\n//     image:\r\n//       \"http://aeriskitchen.com/wp-content/uploads/2008/09/kimchi_bokkeumbap_02-.jpg\",\r\n//     //rating: 5,\r\n//   },\r\n//   {\r\n//     id: 2,\r\n//     name: \"Samgyeopsal\",\r\n//     image:\r\n//       \"https://3.bp.blogspot.com/-hKwIBxIVcQw/WfsewX3fhJI/AAAAAAAAALk/yHxnxFXcfx4ZKSfHS_RQNKjw3bAC03AnACLcBGAs/s400/DSC07624.jpg\",\r\n//     rating: 4.9,\r\n//   },\r\n//   {\r\n//     id: 3,\r\n//     name: \"Bibimbap\",\r\n//     image:\r\n//       \"http://cdn-image.myrecipes.com/sites/default/files/styles/4_3_horizontal_-_1200x900/public/image/recipes/ck/12/03/bibimbop-ck-x.jpg?itok=RoXlp6Xb\",\r\n//     rating: 4.8,\r\n//   },\r\n//   {\r\n//     id: 4,\r\n//     name: \"Doncasu\",\r\n//     image:\r\n//       \"https://s3-media3.fl.yelpcdn.com/bphoto/7F9eTTQ_yxaWIRytAu5feA/ls.jpg\",\r\n//     rating: 4.7,\r\n//   },\r\n//   {\r\n//     id: 5,\r\n//     name: \"Kimbap\",\r\n//     image:\r\n//       \"http://cdn2.koreanbapsang.com/wp-content/uploads/2012/05/DSC_1238r-e1454170512295.jpg\",\r\n//     rating: 4.6,\r\n//   },\r\n// ];\r\n\r\n// // 컴포넌트는 재사용이 된다. html코드안에 js를 쓰고 싶으면 {}를 하고 안에 코드 작성 ㄱㄱ.\r\n// //function Foodd(props)도 된다.\r\n// function Food({ name, picture, rating }) {\r\n//   // 아래 처럼 매개변수를 리턴할 html에 넣는것도가능하다.\r\n//   return (\r\n//     <div>\r\n//       <h2>{name}</h2>\r\n//       <h4>{rating}/5.0</h4>\r\n//       <img src={picture} alt={name}></img>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// // yarn add prop-types => 전달받은 props가 내가 원하는 props인지 체크해줌. 뭐.. props 이름이 잘못됏다던가 그런가..\r\n// // 여기에는 내가 얻고싶은 props의 설명을 적느다.\r\n// // Food.propTypes는 p가 소문자로 시작, 이거는 고정임 리액트가 그렇게 만들어짐, array.propTypes로 해야 체크가능.\r\n// Food.propTypes = {\r\n//   name: PropTypes.string.isRequired,\r\n//   picture: PropTypes.string.isRequired,\r\n//   rating: PropTypes.number,\r\n// };\r\n\r\n// //react는 밀어넣는다 무엇을? virtual dom에 html코드를.. // 컴포넌트는 대문자로 시작해야함.\r\n// //react는 컴포넌트 안에 prop을 넣어서 정보를 전달할 수 있따. 바로 컴포넌트안에 매개변수로 넣어주면 된다.(props -> 컴포넌트의 매개변수)\r\n// // App -> Food(child)로 props를 통해 정보를 보냄.\r\n// // html 안에 {jsarray.map(obj =>( <component props = {~~~}/>))}로 동적으로 컴포넌트를 생성할수 잇따!\r\n// // Warning: Each child in a list should have a unique \"key\" prop. ==> 이게 발생한 원인은? 리액트의 각 컴포넌트는 유일한 키값을 가지고 있어야한다.(key prop이 겹치면 안됨.)\r\n// function App() {\r\n//   return (\r\n//     <div>\r\n//       <h1>heeol</h1>\r\n//       {foodILike.map((dish) => (\r\n//         <Food\r\n//           key={dish.id}\r\n//           name={dish.name}\r\n//           picture={dish.image}\r\n//           rating={dish.rating}\r\n//         />\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// 더이상 state를 갖기위해 class 컴포넌트가 필요는 없다 react hook때문에..\r\n// fuction component와 달리 class component를 만들자 -> React.component 상속\r\n// class component는 리턴이 없고 render method로..\r\nclass Home extends React.Component {\r\n  // // 리액트 라이프사이클!\r\n  // // 1. Mounting : created and inserted into DOM\r\n  // // 순서 : counstructor() -> static getDrivedStateFromProps() -> render() -> componentDidMount()\r\n  // constructor(props) {\r\n  //   // Must call super constructor in derived class before accessing 'this' or returning from derived constructor\r\n  //   super(props);\r\n  //   console.log(\"start\");\r\n  // }\r\n\r\n  // // 클래스 컴포넌트를 사용하는 이유는 state object 때문이다. 컴포넌트에 데이터넣을 공간이 있고 데이터가 변할때..\r\n  // // this.state.뭐시기로 사용.\r\n  // state = {\r\n  //   count: 0,\r\n  // };\r\n  // // state에 직접 접근하게 되면(ex: this.state) 리액트는 render method를 refresh하지 않음.\r\n  // // 정확히는 컴포넌트가 Updateing Lifcycle로 들어감!\r\n  // // setstate에 새로운 object를 넣어줘야함.({count:1})\r\n  // // setState(current => ({current~~})) 여기서 current는 current state를 뜻함.\r\n  // // ({}) is part of implicit return  ==> js는 이게 return 을 나타내기위한 {} 인지,\r\n  // // 아니면 객체를 나타내기 위한 {} 인지 잘 모르기 때문에 둘을 구분하기 위해\r\n  // // 객체 를 반환하는 경우 ({}) 를 사용\r\n  // add = () => {\r\n  //   //this.state.count = 1;\r\n  //   this.setState((current) => ({ count: current.count + 1 }));\r\n  // };\r\n  // minus = () => {\r\n  //   this.setState((current) => ({ count: current.count - 1 }));\r\n  // };\r\n\r\n  // // Mounting 중 컴포넌트가 render() method 실행한 후 콜백으로 실행\r\n  // componentDidMount() {\r\n  //   console.log(\"component rendered\");\r\n  // }\r\n  // // Updating(setState호출) 중 컴포넌트의 state가 update되고 render() method가 실행된 후 콜백으로 실행\r\n  // componentDidUpdate() {\r\n  //   console.log(\"component updated!\");\r\n  // }\r\n  // // UnMounting 중(컴포넌트가 떠날때)\r\n  // componentWillUnmount() {\r\n  //   console.log(\"component killed\");\r\n  // }\r\n  // react는 자동적으로 클래스 컴포넌트의 render 메서드를 실행시킨다.\r\n  // render() {\r\n  //   console.log(\"im rendering\");\r\n  //   return (\r\n  //     <div>\r\n  //       <h1>the number is {this.state.count}</h1>\r\n  //       {\r\n  //         //리액트는 버튼에 onclick props를 자동으로 가지고 있다.\r\n  //       }\r\n  //       <button onClick={this.add}>add</button>\r\n  //       <button onClick={this.minus}>minus</button>\r\n  //     </div>\r\n  //   );\r\n  // }\r\n\r\n  state = {\r\n    isLoading: true,\r\n    movies: [],\r\n  };\r\n\r\n  getMovies = async () => {\r\n    const {\r\n      data: {\r\n        data: { movies },\r\n      },\r\n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\r\n    this.setState({ movies, isLoading: false });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getMovies();\r\n  }\r\n  // map은 뭔가를 무조건 리턴 해야함.\r\n  render() {\r\n    const { isLoading, movies } = this.state;\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader__stext\">Loading...</span>\r\n          </div>\r\n        ) : (\r\n          <div className=\"movies\">\r\n            {movies.map((movie) => {\r\n              return (\r\n                <Movie\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  year={movie.year}\r\n                  title={movie.title}\r\n                  summary={movie.summary}\r\n                  poster={movie.medium_cover_image}\r\n                  genres={movie.genres}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./Detail.css\";\r\n\r\n// Route되는 컴포넌트인 만큼 props가 기본적으로 세팅되어잇음.\r\n// history props를 통해 redirection을 조절가능.\r\nclass Detail extends React.Component {\r\n  componentDidMount() {\r\n    const { location, history } = this.props;\r\n    if (location.state === undefined) {\r\n      history.push(\"/\");\r\n    }\r\n  }\r\n  render() {\r\n    const { location } = this.props;\r\n    const movie = location.state;\r\n    if (movie) {\r\n      return (\r\n        <div className=\"detail__container\">\r\n          <img src={movie.poster} alt={movie.title} title={movie.title}></img>\r\n          <div className=\"movie__data\">\r\n            <h3 className=\"movie__title\">{movie.title}</h3>\r\n            <h5 className=\"movie__year\">{movie.year}</h5>\r\n            <ul className=\"movie__genres\">\r\n              {movie.genres.map((genre, index) => (\r\n                <li key={index} className=\"genres__genre\">\r\n                  {genre}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <p className=\"movie__summary\">{movie.summary}</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Detail;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\n\r\n// 평범한 <a href=\"\">를 쓰게 되면 html이 리플레쉬되어 리액트가죽가된다.\r\n// react-router-dom의 Link를 쓰자\r\n// Link는 <HashRouter>와 같은 Router의 child이어야 작동한다.\r\n// <Link>의 \"to\" props에 {}(object)를 넘길수 있다. 여기에서 state(props)를 넘길수 있다.(click하면)\r\nfunction Navigation() {\r\n  return (\r\n    <div className=\"nav\">\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/about\">About</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","// 이거는 원래 없던거인데 내가 적음. 이게 없으면... jsx가 있는 컴포넌트를 사용하는 것을 이해못한다는데 업데이트된거같다, 없어도된다.\nimport React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport About from \"./routes/About\";\nimport Home from \"./routes/Home\";\nimport Detail from \"./routes/Detail\";\nimport Navigation from \"./components/Navigation\";\nimport \"./App.css\";\n\n// Router만들꺼임 주소에 따라 렌더링할 컴포넌트 지정(네비게이션 바)\n// Route props에 path에 주소, component에 컴포넌트를 넣자\n// path에 주소가 겹치면(ex /home과 /introduction 두개가 /home/introduction 이렇게 합쳐지면 Route 밑의 두개의 컴포넌트가 렌더링된다.)\n// 위의 경우 exact=true props를 넣어주면 url이 정확히 일치할때만 Route가 렌더링된다.\nfunction App() {\n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie/:id\" component={Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// \"<App />\"는 컴포넌트임.\n// component : html 코드를 반환하는 함수 -> 컴포넌트를 사용해서 html처럼 사용함. -> Js + html = JSX(컴포넌트를 사용하는 방법)\n// JSX : html inside of javascript\n// render은 하나의컴포넌트만 렌더링가능\n// 그러나 Application 컴포넌트 안에 많은 컴포넌트를 넣을수 있고 그 안에다시 더 많은 컴포넌트를 넣을 수 있다.(import로)\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}